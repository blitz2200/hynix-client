name: hynix client deploy to aws

on:
  workflow_dispatch:
#  push:
#    branches: [ "main" ]

jobs:
  build:
    #    runs-on: ubuntu-20.04
    runs-on: [self-hosted, Linux, aws, ARM64]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Enkis Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.enkis.co.kr
          username: ${{ secrets.ENKIS_REGISTRY_USERNAME }}
          password: ${{ secrets.ENKIS_REGISTRY_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            docker.enkis.co.kr/homepage:latest
            docker.enkis.co.kr/homepage:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    needs: build
    name: Deploy
    runs-on: self-hosted
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.ENKIS_RSA }}
          port: ${{ secrets.PORT }}
          script_stop: true
          script: |
            echo "${{ secrets.ENKIS_REGISTRY_PASSWORD }}" | docker login docker.enkis.co.kr --username ${{ secrets.ENKIS_REGISTRY_USERNAME }} --password-stdin
            cd ~/enkis-homepage && docker-compose down
            docker pull docker.enkis.co.kr/homepage:latest
            docker-compose up -d
  success:
    needs: deploy
    name: Notification
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
